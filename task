package main


import (
	"fmt"
	"bytes"
	"strconv"
	"encoding/json"

	"github.com/hyperledger/fabric/core/chaincode/shim"
	pb "github.com/hyperledger/fabric/protos/peer"
)


//var ID int = 0


// SimpleChaincode example simple Chaincode implementation
type SimpleChaincode struct {
}


// =====================================
//      Init initializes chaincode
// =====================================
func (t *SimpleChaincode) Init(stub shim.ChaincodeStubInterface) pb.Response {
	return shim.Success(nil)
}


type request struct {
	ObjectType     string  `json:"objectType"`    //objectType is used to distinguish the various types of objects in state database
	Requester      string  `json:"requester"`
	Task           string  `json:"task"`
	ResponseTime   float64 `json:"responseTime"`
	Throughput     float64 `json:"throughput"`
	Budget         float64 `json:"budget"`
}


type response struct {
	ObjectType     string  `json:"objectType"`    //objectType is used to distinguish the various types of objects in state database
	Requester      string  `json:"requester"`
	Provider       string  `json:"provider"`
	Task           string  `json:"task"`
	ResponseTime   float64 `json:"responseTime"`
	Throughput     float64 `json:"throughput"`
	Price          float64 `json:"price"`
}



// ===================================================================================
// Main
// ===================================================================================
func main() {
	err := shim.Start(new(SimpleChaincode))
	if err != nil {
		fmt.Printf("Error starting Simple chaincode: %s", err)
	}
}


// =====================================================
//      Invoke - Our entry point for Invocations
// =====================================================
func (t *SimpleChaincode) Invoke(stub shim.ChaincodeStubInterface) pb.Response {
	function, args := stub.GetFunctionAndParameters()
	fmt.Println("invoke is running " + function)

	if function == "writeRequest" {
		return t.writeRequest(stub, args)
	} else if function == "readRequest" {
		return t.readRequest(stub, args)
	} else if function == "writeResponse" {
		return t.writeResponse(stub, args)
	} else if function == "readResponse" {
		return t.readResponse(stub, args)
	} else if function == "Check" {
		return t.Check(stub, args)
	} else if function == "queryByObjectType" {
    return t.queryByObjectType(stub, args)
  }
	return shim.Success(nil)
}


// ===============================================
//       write request from chaincode state
// ===============================================
func (t *SimpleChaincode) writeRequest(stub shim.ChaincodeStubInterface, args []string) pb.Response {
	var err error

	//   0           1          2      3       4
	// "u1", "collect_data", "0.31", "6.9", "12.7"
	if len(args) != 5 {
		return shim.Error("Incorrect number of arguments. Expecting 5")
	}

	// ==== Input sanitation ====
	fmt.Println("- start write request")
	if len(args[0]) <= 0 {
		return shim.Error("1st argument must be a non-empty string")
	}
	if len(args[1]) <= 0 {
		return shim.Error("2nd argument must be a non-empty string")
	}
	if len(args[2]) <= 0 {
		return shim.Error("3rd argument must be a non-empty string")
	}
	if len(args[3]) <= 0 {
		return shim.Error("4th argument must be a non-empty string")
	}
	if len(args[4]) <= 0 {
		return shim.Error("5th argument must be a non-empty string")
	}

	auctioneer := args[0]
  task := args[1]

	responseTime, err := strconv.ParseFloat(args[2], 64)
	if err != nil {
		return shim.Error("2rd argument must be a numeric string")
	}

	throughput, err := strconv.ParseFloat(args[3], 64)
	if err != nil {
		return shim.Error("3rd argument must be a numeric string")
	}

	budget, err := strconv.ParseFloat(args[4], 64)
	if err != nil {
		return shim.Error("4rd argument must be a numeric string")
	}
	objectType := "request"

	// ==== Create Compositekey ====
	indexName := "index"
	IndexKey, err := stub.CreateCompositeKey(indexName, []string{auctioneer, task, args[2], args[3]})
	if err != nil {
		return shim.Error(err.Error())
	}
	value := []byte{0x00}

	// ==== Check if request already exists ====
	requestAsBytes, err := stub.GetState(IndexKey)
	if err != nil {
		return shim.Error("Failed to get request: " + err.Error())
	} else if requestAsBytes != nil {
		fmt.Println("The request already exists")
		return shim.Error("The request already exists")
	}
	stub.PutState(IndexKey, value)

	// ==== Create request object and marshal to JSON ====
	request0 := &request{objectType, auctioneer, task, responseTime, throughput, budget}
	requestJSONasBytes, err := json.Marshal(request0)
	if err != nil {
		return shim.Error(err.Error())
	}

	// === Save request to state ===
	err = stub.PutState(IndexKey, requestJSONasBytes)
	if err != nil {
		return shim.Error(err.Error())
	}

	fmt.Println("write request successfully", auctioneer)
  fmt.Println("- end write request")
	return shim.Success(nil)
}


// ===============================================
//       read request from chaincode state
// ===============================================
func (t *SimpleChaincode) readRequest(stub shim.ChaincodeStubInterface, args []string) pb.Response {
	var jsonResp string

	//   0           1          2      3
	// "u1", "collect_data", "0.31", "6.9"
	if len(args) != 4 {
		return shim.Error("Incorrect number of arguments. Expecting 4")
	}

	fmt.Println("- start read request")
	if len(args[0]) <= 0 {
		return shim.Error("1st argument must be a non-empty string")
	}
	if len(args[1]) <= 0 {
		return shim.Error("2nd argument must be a non-empty string")
	}
	if len(args[2]) <= 0 {
		return shim.Error("3rd argument must be a non-empty string")
	}
	if len(args[3]) <= 0 {
		return shim.Error("4th argument must be a non-empty string")
	}

	requester := args[0]
	task := args[1]
	responsetime := args[2]
	throughput := args[3]

	// ==== Create Compositekey ====
	indexName := "index"
	IndexKey, err := stub.CreateCompositeKey(indexName, []string{requester, task, responsetime, throughput})
	if err != nil {
		return shim.Error(err.Error())
	}

	requestAsbytes, err := stub.GetState(IndexKey)    //get the request from chaincode state
	if err != nil {
		jsonResp = "{\"Error\":\"Failed to get state for request\"}"
		return shim.Error(jsonResp)
	} else if requestAsbytes == nil {
		jsonResp = "{\"Error\":\"Agenttask does not exist\"}"
		return shim.Error(jsonResp)
	}

	fmt.Println("readRequestResults:", requestAsbytes)
	fmt.Println("- end read request")
	return shim.Success(requestAsbytes)
}


// ===============================================
//       write Response from chaincode state
// ===============================================
func (t *SimpleChaincode) writeResponse(stub shim.ChaincodeStubInterface, args []string) pb.Response {
	var err error

	//  1     2           3          4      5      6
	//"u1", "u2", "collect_data", "0.65", "7.5","10.0"
	if len(args) != 6 {
		return shim.Error("Incorrect number of arguments. Expecting 6")
	}

	// ==== Input sanitation ====
	fmt.Println("- start write response")
	if len(args[0]) <= 0 {
		return shim.Error("1st argument must be a non-empty string")
	}
	if len(args[1]) <= 0 {
		return shim.Error("2nd argument must be a non-empty string")
	}
	if len(args[2]) <= 0 {
		return shim.Error("3rd argument must be a non-empty string")
	}
	if len(args[3]) <= 0 {
		return shim.Error("4th argument must be a non-empty string")
	}
	if len(args[4]) <= 0 {
		return shim.Error("5th argument must be a non-empty string")
	}
	if len(args[5]) <= 0 {
		return shim.Error("6th argument must be a non-empty string")
	}

	requester := args[0]
	provider := args[1]
  task := args[2]
	responseTime, err := strconv.ParseFloat(args[3], 64)
	if err != nil {
		return shim.Error("2rd argument must be a numeric string")
	}
	throughput, err := strconv.ParseFloat(args[4], 64)
	if err != nil {
		return shim.Error("3rd argument must be a numeric string")
	}
	price, err := strconv.ParseFloat(args[5], 64)
	if err != nil {
		return shim.Error("4rd argument must be a numeric string")
	}

	objectType := "response"

	// ==== create CreateCompositeKey ====
	indexName := "index"
	IndexKey, err := stub.CreateCompositeKey(indexName, []string{requester, provider, task, args[3], args[4]})
	if err != nil {
		return shim.Error(err.Error())
	}
	value := []byte{0x00}

	// ==== Check if response already exists ====
	provideAsBytes, err := stub.GetState(IndexKey)
	if err != nil {
		return shim.Error("Failed to get provide: " + err.Error())
	} else if provideAsBytes != nil {
		fmt.Println("The provide already exists")
		return shim.Error("The provide already exists")
	}
	stub.PutState(IndexKey, value)

	// ==== Create response object and marshal to JSON ====
	provide0 := &response{objectType, requester, provider, task, responseTime, throughput, price}
	provideJSONasBytes, err := json.Marshal(provide0)
	if err != nil {
		return shim.Error(err.Error())
	}

	// === Save response to state ===
	err = stub.PutState(IndexKey, provideJSONasBytes)
	if err != nil {
		return shim.Error(err.Error())
	}

	fmt.Println("write response successfully", provider)
  fmt.Println("- end write response")
	return shim.Success(nil)
}


// ===============================================
//       read response from chaincode state
// ===============================================
func (t *SimpleChaincode) readResponse(stub shim.ChaincodeStubInterface, args []string) pb.Response {
	var jsonResp string

	//  1     2           3          4      5
	//"u1", "u2", "collect_data", "0.65", "7.5"
	if len(args) != 5 {
		return shim.Error("Incorrect number of arguments. Expecting 5")
	}

	// ==== Input sanitation ====
	fmt.Println("- start read response")
	if len(args[0]) <= 0 {
		return shim.Error("1st argument must be a non-empty string")
	}
	if len(args[1]) <= 0 {
		return shim.Error("2nd argument must be a non-empty string")
	}
	if len(args[2]) <= 0 {
		return shim.Error("3rd argument must be a non-empty string")
	}
	if len(args[3]) <= 0 {
		return shim.Error("4th argument must be a non-empty string")
	}
	if len(args[4]) <= 0 {
		return shim.Error("5th argument must be a non-empty string")
	}

	// ==== Create CreateCompositeKey ====
	indexName := "index"
	IndexKey, err := stub.CreateCompositeKey(indexName, []string{args[0], args[1], args[2], args[3], args[4]})
	if err != nil {
		return shim.Error(err.Error())
	}

	// ==== Check if response exists ====
	responseAsbytes, err := stub.GetState(IndexKey)
	if err != nil {
		jsonResp = "{\"Error\":\"Failed to get state for response\"}"
		return shim.Error(jsonResp)
	} else if responseAsbytes == nil {
		jsonResp = "{\"Error\":\"(Response does not exist\"}"
		return shim.Error(jsonResp)
	}

	//fmt.Println("readResponseResults:",shim.Success(responseAsbytes))
	fmt.Println("- end read response")
	return shim.Success(responseAsbytes)
}


// =================================================================
//     query all requests or all responses from chaincode state
// =================================================================
func (t *SimpleChaincode) queryByObjectType(stub shim.ChaincodeStubInterface, args []string) pb.Response {

	//    1
	//"request"
	if len(args) < 1 {
		return shim.Error("Incorrect number of arguments. Expecting 1")
	}

	objectType := args[0]

	queryString := fmt.Sprintf("{\"selector\":{\"objectType\":\"%s\"}}", objectType)
	queryResults, err := getQueryResultForQueryString(stub, queryString)

	if err != nil {
		return shim.Error(err.Error())
	}
	return shim.Success(queryResults)
}


// ===========================================================================
// Check-check responses that objectType is response and task is collect_data
// ===========================================================================
func (t *SimpleChaincode) Check(stub shim.ChaincodeStubInterface, args []string) pb.Response {

	//       1
	//"collect_data"
	if len(args) < 1 {
		return shim.Error("Incorrect number of arguments. Expecting 1")
	}

	task := args[0]

	queryString := fmt.Sprintf("{\"selector\":{\"objectType\":\"response\",\"task\":\"%s\"}}", task)
	queryResults, err := getQueryResultForQueryString(stub, queryString)

	if err != nil {
		return shim.Error(err.Error())
	}
	return shim.Success(queryResults)
}


// =========================================================================================
// getQueryResultForQueryString executes the passed in query string.
// Result set is built and returned as a byte array containing the JSON results.
// =========================================================================================
func getQueryResultForQueryString(stub shim.ChaincodeStubInterface, queryString string) ([]byte, error) {

	fmt.Printf("- getQueryResultForQueryString queryString:\n%s\n", queryString)

	resultsIterator, err := stub.GetQueryResult(queryString)
	if err != nil {
		return nil, err
	}
	defer resultsIterator.Close()

	// buffer is a JSON array containing QueryRecords
	var buffer bytes.Buffer
	buffer.WriteString("[")

	providerAlreadyWritten := false
	for resultsIterator.HasNext() {
		queryResponse, err := resultsIterator.Next()
		if err != nil {
			return nil, err
		}
		// Add a comma before array members, suppress it for the first array member
		if providerAlreadyWritten == true {
			buffer.WriteString(",")
		}
		buffer.WriteString("{\"Key\":")
		buffer.WriteString("\"")
		buffer.WriteString(queryResponse.Key)
		buffer.WriteString("\"")

		buffer.WriteString(", \"Record\":")
		// Record is a JSON object, so we write as-is
		buffer.WriteString(string(queryResponse.Value))
		buffer.WriteString("}")
		providerAlreadyWritten = true
	}
	buffer.WriteString("]")

	fmt.Printf("- getQueryResultForQueryString queryResult:\n%s\n", buffer.String())
	return buffer.Bytes(), nil
}
