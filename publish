package main


import (
	"fmt"
	"strconv"
	"bytes"
	"encoding/json"
	"errors"
	"sync"
	"time"

	"github.com/hyperledger/fabric/core/chaincode/shim"
	pb "github.com/hyperledger/fabric/protos/peer"
)


// SimpleChaincode example simple Chaincode implementation
type SimpleChaincode struct {
}


type task struct {
	ObjectType     string    `json:"objectType"`
  ID             string    `json:"id"`
  TaskName       string    `json:"taskName"`
  Description    string    `json:"description"`
}


type IdWorker struct {
   sequence      int64
   lastTimestamp int64
   nodeId        int64
   twepoch       int64
   districtId    int64
   mutex         sync.Mutex
}


const (
   twepoch            = int64(1417937700000) // default timestamp 1449473700000
   DistrictIdBits     = uint(5)
   NodeIdBits         = uint(9)
   sequenceBits       = uint(10)

   maxNodeId          = -1 ^ (-1 << NodeIdBits)
   maxDistrictId      = -1 ^ (-1 << DistrictIdBits)

   nodeIdShift        = sequenceBits
   DistrictIdShift    = sequenceBits + NodeIdBits
   timestampLeftShift = sequenceBits + NodeIdBits + DistrictIdBits
   sequenceMask       = -1 ^ (-1 << sequenceBits)
   maxNextIdsNum      = 100
)


// =====================================
//      Init initializes chaincode
// =====================================
func (t *SimpleChaincode) Init(stub shim.ChaincodeStubInterface) pb.Response {
	return shim.Success(nil)
}


// ===================================================================================
// Main
// ===================================================================================
func main() {
	err := shim.Start(new(SimpleChaincode))
	if err != nil {
		fmt.Printf("Error starting Simple chaincode: %s", err)
	}
}


// =====================================================
//      Invoke - Our entry point for Invocations
// =====================================================
func (t *SimpleChaincode) Invoke(stub shim.ChaincodeStubInterface) pb.Response {
  function, args := stub.GetFunctionAndParameters()
  fmt.Println("invoke is running " + function)

  if function == "addTask" {
		return t.addTask(stub, args)
	} else if function == "queryTask" {
    return t.queryTask(stub)
  } else if function == "queryTaskByName" {
		return t.queryTaskByName(stub, args)
	} else if function == "queryTaskByDescription" {
		return t.queryTaskByDescription(stub, args)
	} else if function == "getTaskId" {
		return t.getTaskId(stub)
	}
  return shim.Success(nil)
}


// ===================================================
//      addTask - add tasks from chaincode state
// ===================================================
func (t *SimpleChaincode) addTask(stub shim.ChaincodeStubInterface, args []string) pb.Response {

	//     0           1          2
	//"$taskID" "collect_data", "000"
  if len(args) != 3 {
    return shim.Error("Incorrect number of arguments. Expecting 3")
  }

  fmt.Println("- start add task")
	if len(args[0]) <= 0 {
		return shim.Error("1st argument must be a non-empty string")
	}
	if len(args[1]) <= 0 {
		return shim.Error("2nd argument must be a non-empty string")
	}
	if len(args[1]) <= 0 {
		return shim.Error("2nd argument must be a non-empty string")
	}

	objectType := "Task"
	taskId := args[0]
	taskName := args[1]
  description := args[2]

	// ==== Check if task already exists ====
	taskAsBytes, err := stub.GetState(taskId)
	if err != nil {
		return shim.Error("Failed to get task: " + err.Error())
	} else if taskAsBytes != nil {
		fmt.Println("The task already exists")
		return shim.Error("The task already exists")
	}

	// ==== Create task object and marshal to JSON ====
  addTaskJSON := &task{objectType, taskId, taskName, description}
  taskJSONasBytes, err := json.Marshal(addTaskJSON)
	if err != nil {
		return shim.Error(err.Error())
	}

	// ==== Save task to state ====
  err = stub.PutState(taskId, taskJSONasBytes)
	if err != nil {
		return shim.Error(err.Error())
	}

	idByte := []byte(taskId)

  fmt.Println("add task successfully", taskId)
  fmt.Println("- end add task\n")
	return shim.Success(idByte)
}


func (t *SimpleChaincode) getTaskId(stub shim.ChaincodeStubInterface) pb.Response {
	var idStr string

	iw, err := NewIdWorker(1)
	if err!= nil {
		fmt.Println(err)
	}

	if id, err := iw.NextId(); err != nil {
		fmt.Println(err)
	} else {
		idStr = strconv.FormatInt(id, 10)
	}

	return shim.Success([]byte(idStr))
}


// ============================================================
//      queryTask - query all tasks from chaincode state
// ============================================================
func (t *SimpleChaincode) queryTask(stub shim.ChaincodeStubInterface) pb.Response {

	fmt.Println("- start query all tasks")

	queryString := fmt.Sprintf("{\"selector\":{\"objectType\":\"Task\"}}")
	queryResults, err := getResultForQueryString(stub, queryString)

	if err != nil {
		return shim.Error(err.Error())
	}
	fmt.Println("- end query all tasks\n")
	return shim.Success(queryResults)
}


// ==============================================================================
//      queryTaskByName - query all tasks from chaincode state by taskName
// ==============================================================================
func (t *SimpleChaincode) queryTaskByName(stub shim.ChaincodeStubInterface, args []string) pb.Response {

	//       1
	//"collect_data"
	if len(args) < 1 {
		return shim.Error("Incorrect number of arguments. Expecting 1")
	}
	fmt.Println("- start query task by name")

	taskName := args[0]

	queryString := fmt.Sprintf("{\"selector\":{\"taskName\":{\"$regex\":\"(?i)%s\"}}}", taskName)
	queryResults, err := getResultForQueryString(stub, queryString)

	if err != nil {
		return shim.Error(err.Error())
	}
	fmt.Println("- end query task by name\n")
	return shim.Success(queryResults)
}


// ========================================================================================
//      queryTaskByDescription - query all tasks from chaincode state by description
// ========================================================================================
func (t *SimpleChaincode) queryTaskByDescription(stub shim.ChaincodeStubInterface, args []string) pb.Response {

	//       1
	//"collect_data"
	if len(args) < 1 {
		return shim.Error("Incorrect number of arguments. Expecting 1")
	}
	fmt.Println("- start query task by description")

	description := args[0]

	queryString := fmt.Sprintf("{\"selector\":{\"description\":{\"$regex\":\"(?i)%s\"}}}", description)
	queryResults, err := getResultForQueryString(stub, queryString)

	if err != nil {
		return shim.Error(err.Error())
	}
	fmt.Println("- end query task by description\n")
	return shim.Success(queryResults)
}


// =========================================================================================
// getQueryResultForQueryString executes the passed in query string.
// Result set is built and returned as a byte array containing the JSON results.
// =========================================================================================
func getResultForQueryString(stub shim.ChaincodeStubInterface, queryString string) ([]byte, error) {

	resultsIterator, err := stub.GetQueryResult(queryString)
	if err != nil {
		return nil, err
	}
	defer resultsIterator.Close()

	// buffer is a JSON array containing QueryRecords
	var buffer bytes.Buffer
	buffer.WriteString("[")

	providerAlreadyWritten := false
	for resultsIterator.HasNext() {
		queryResponse, err := resultsIterator.Next()
		if err != nil {
			return nil, err
		}
		// Add a comma before array members, suppress it for the first array member
		if providerAlreadyWritten == true {
			buffer.WriteString(",")
		}

		buffer.WriteString("\"Record\":")
		// Record is a JSON object, so we write as-is
		buffer.WriteString(string(queryResponse.Value))
		buffer.WriteString("}")
		providerAlreadyWritten = true
	}
	buffer.WriteString("]")

	fmt.Printf("- getResultForQueryString queryResult:\n%s\n", buffer.String())
	return buffer.Bytes(), nil
}


// =================================================================
//        NewIdWorker - new a snowflake id generator object.
// =================================================================
func NewIdWorker(NodeId int64) (*IdWorker, error) {
   var districtId int64
   districtId = 1
   idWorker := &IdWorker{}
   if NodeId > maxNodeId || NodeId < 0 {
      fmt.Sprintf("NodeId Id can't be greater than %d or less than 0", maxNodeId)
      return nil, errors.New(fmt.Sprintf("NodeId Id: %d error", NodeId))
   }
   if districtId > maxDistrictId || districtId < 0 {
      fmt.Sprintf("District Id can't be greater than %d or less than 0", maxDistrictId)
      return nil, errors.New(fmt.Sprintf("District Id: %d error", districtId))
   }
   idWorker.nodeId = NodeId
   idWorker.districtId = districtId
   idWorker.lastTimestamp = -1
   idWorker.sequence = 0
   idWorker.twepoch = twepoch
   idWorker.mutex = sync.Mutex{}
   fmt.Sprintf("worker starting. timestamp left shift %d, District id bits %d, worker id bits %d, sequence bits %d, workerid %d", timestampLeftShift, DistrictIdBits, NodeIdBits, sequenceBits, NodeId)
   return idWorker, nil
}


// =====================================================
//        timeGen - generate a unix millisecond.
// =====================================================
func timeGen() int64 {
   return time.Now().UnixNano() / int64(time.Millisecond)
}


// ==========================================================
//      tilNextMillis - spin wait till next millisecond.
// ==========================================================
func tilNextMillis(lastTimestamp int64) int64 {
   timestamp := timeGen()
   for timestamp <= lastTimestamp {
      timestamp = timeGen()
   }
   return timestamp
}


// ============================================
//      NextId - get a snowflake id.
// ============================================
func (id *IdWorker) NextId() (int64, error) {
   id.mutex.Lock()
   defer id.mutex.Unlock()
   return id.nextid()
}


func (id *IdWorker) nextid() (int64, error) {
   timestamp := timeGen()
   if timestamp < id.lastTimestamp {
      return 0, errors.New(fmt.Sprintf("Clock moved backwards.  Refusing to generate id for %d milliseconds", id.lastTimestamp-timestamp))
   }

   if id.lastTimestamp == timestamp {
      id.sequence = (id.sequence + 1) & sequenceMask
      if id.sequence == 0 {
         timestamp = tilNextMillis(id.lastTimestamp)
      }
   } else {
      id.sequence = 0
   }

   id.lastTimestamp = timestamp
   return ((timestamp - id.twepoch) << timestampLeftShift) | (id.districtId << DistrictIdShift) | (id.nodeId << nodeIdShift) | id.sequence, nil
}
